/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package cl.uchile.workflow.web;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.hibernate.Hibernate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.servlet.ModelAndView;

import cl.uchile.workflow.persistance.UsersDAO;
import cl.uchile.workflow.persistance.model.Session;
import cl.uchile.workflow.persistance.model.User;

/**
 * Simple little @Controller that invokes Facebook and renders the result. The
 * injected {@link Facebook} reference is configured with the required
 * authorization credentials for the current user behind the scenes.
 * 
 * @author Keith Donald
 */
@Controller
public class HomeController {
	@Autowired
	public UsersDAO usersDAO;

	@Transactional
	@RequestMapping(value = { "/", "/login", "/newSession", "/map", "/invite" }, method = RequestMethod.GET)
	public ModelAndView home(HttpServletRequest request,
			@RequestParam(required = false) String msg, @RequestParam(required = false) String session) {
		String userName = (String) request.getSession().getAttribute("user");
		
		if (userName != null) {
			HashMap<String, Object> data = new HashMap<String, Object>();
			if(session != null){
				Session s = this.usersDAO.bySessionID(session);
				data.put("sname", s.getName());
				data.put("users", s.getUsers());
				data.put("session", session);
			}
						
			User user = usersDAO.byName(userName);
			data.put("name", userName);
			data.put("sessions", user.getSessions());
			data.put("msg", msg);	
			String path = request.getSession().getServletContext().getRealPath("/");
			data.put("webappRoot", path);
			return new ModelAndView("home", data);			
		}
		
		return new ModelAndView("login");
	}

	@RequestMapping(value = "/test", method = RequestMethod.GET)
	public String test(Model model) {
		return "fileupload";
	}

	@RequestMapping(value = "/guest", method = RequestMethod.GET)
	public String guest(Model model) {
		int random = (int) (Math.random() * ((10000) + 1));
		model.addAttribute("name", "Guest_" + random);
		return "home";
	}

	@RequestMapping(value = "/publish", method = RequestMethod.POST)
	public @ResponseBody
	String publish(@RequestParam("blogId") String blogId,
			@RequestParam("title") String title,
			@RequestParam("userName") String userName) {

		return blogId + " " + title;
	}

	@RequestMapping(value = "/register", method = RequestMethod.GET)
	public String goRegister() {
		return "register";
	}

	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public ModelAndView register(@RequestParam String user,
			@RequestParam String pass) {

		if (this.usersDAO.save(new User(user, pass))) {
			return new ModelAndView("login", "msg",
					"User registered successfully");
		}
		return new ModelAndView("register", "msg", "User already registered");
	}

	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public ModelAndView login(HttpServletRequest request,
			@RequestParam String user, @RequestParam String pass) {

		if (this.usersDAO.login(user, pass)) {
			request.getSession().setAttribute("user", user);
			return this.map(request, null);
		}
		return new ModelAndView("login", "msg",
				"User and/or Password are invalid");
	}

	@RequestMapping(value = "/logout", method = RequestMethod.GET)
	public ModelAndView logout(HttpServletRequest request) {
		request.getSession().setAttribute("user", null);
		return this.home(request, null, null);

	}

	@RequestMapping(value = "/newSession", method = RequestMethod.POST)
	public ModelAndView register(HttpServletRequest request,
			@RequestParam String session) {
		String userName = (String) request.getSession().getAttribute("user");
		if (this.usersDAO.save(new Session(session), userName)) {
			return this.home(request, "OK", null);
		}
		return this.home(request, "FAIL", null);
	}
	
	@RequestMapping(value = "/newProcess", method = RequestMethod.POST)
	public @ResponseBody Boolean newProcess(@RequestParam("user") String user,
			@RequestParam("session") String session){		
		boolean b = this.usersDAO.save(new Session(session), user);
		return b;
	}	
	
	
	@RequestMapping(value = "/invite2", method = RequestMethod.POST)	
	public @ResponseBody String invite2(@RequestParam("session") String session, @RequestParam("user") String user) {
		if (usersDAO.joinUserToSession(user, session)) {
			return user;
		}
		return null;
	}

	@RequestMapping(value = "/map", method = RequestMethod.POST)
	public ModelAndView map(HttpServletRequest request,
			@RequestParam String session) {
		
		String userName = (String) request.getSession().getAttribute("user");
		
		User user = usersDAO.byName(userName);
		for (Session sessiond : user.getSessions()) {
			if (sessiond.getSessionID().equals(session)) {
				HashMap<String, Object> data = new HashMap<String, Object>();
				data.put("name", userName);
				data.put("session", session);
				data.put("sname", sessiond.getName());
				data.put("users", sessiond.getUsers());
				data.put("sessions", user.getSessions());
				data.put("webappRoot", request.getSession().getServletContext().getRealPath("/"));
				return new ModelAndView("home", data);
			}
		}
		return this.home(request, "Permission denied", null);
	}
	

	
	
	@RequestMapping(value = "/chargeUsers", method = RequestMethod.GET)
	@ResponseBody
	public List<String> chargeUsers(){	
		List<User> users = this.usersDAO.getAllUsers();	
		List<String> userstring = new ArrayList<String>();
		if(users.size()> 0){
			Iterator<User> us = users.iterator();
			while(us.hasNext()){
				userstring.add(us.next().getUser());
			}
			return userstring;
		}else
			return null;
		 	
	}
	
	
	
	
	@RequestMapping(value = "/usersBySession/{session}", method = RequestMethod.GET)
	@ResponseBody
	public List<String> usersBySession(@RequestParam("session") String session) {	
		Session s = usersDAO.bySessionID(session);	
		List<User> u = s.getUsers(); 
		List<String> users = new ArrayList<String>();
		if(u.size() > 0 && u != null){
			Iterator<User> iu = s.getUsers().iterator();
			while(iu.hasNext()){
				users.add(iu.next().getUser());
			}
			return users;
		}else
			return null;
	}	
	
	
	@RequestMapping(value = "/chargeProcess/{name}", method = RequestMethod.GET)	   
	public @ResponseBody List<String> chargeProcess(@PathVariable("name") String name){		
		User user = usersDAO.byName(name);
		List<Session> ss = user.getSessions();
		List<String> processNames = new ArrayList<String>();
		Iterator<Session> it = ss.iterator();
		while(it.hasNext()){
			processNames.add(it.next().getSessionID());
		}
		
		Session s = new Session();
		s.setName(name);
		s.setSessionID(name);
		return processNames;
	}

}
