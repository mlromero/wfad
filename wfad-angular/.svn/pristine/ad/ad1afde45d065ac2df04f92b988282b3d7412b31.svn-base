

var app = angular.module("workflow", ['google-maps'.ns(), 'ui.bootstrap', 'mentio']);//,  'ngRoute']);

app.filter('reverse', function() {
  return function(items) {
    return items.slice().reverse();
  };
});



app.controller('appController', function($scope, $http, $window, $q, ConstantsService, tweetService, mapService, sizeService){
	
	
	
	$scope.selectedData = {}; 	
	$scope.tweet = {txt: ($window.currentProcess== null || $window.currentProcess == "")?'':'%1 #'+$window.currentProcess};	
	$scope.currentProcess = $window.currentProcess;	
	$scope.process = ($window.currentProcess == null || $window.currentProcess == "")? null:new Process($scope.currentProcess);
	$scope.username = $window.username;
	$scope.tooltip = {
			tweetButton: ($window.currentProcess == null || $window.currentProcess == "")?'Add a new process':'Add a new tweet',
			closeSession: "Logout",
			processes: ($window.currentProcess == null || $window.currentProcess =="")?"Enter into a process":"Add friend to current process or Enter into your processes",
			pattern: "Select a pattern"
	};
	
	$scope.error = {}; //chargeProcess: 
	
	$scope.processes;
	$scope.currentUsers = [];
	
	$scope.selectedFriend = undefined;
	$scope.users = [];	
	$scope.flows = [];
	
	$scope.status = {
			oneAtATime: true,
			isFirstOpen: false,
			isFirstDisabled: false
	};	
	
	$scope.alertsFriend = [{  msg: 'Add a new friend!' }
	                
	              ];
	
	$scope.addAlert = function(t, m) {
		if(t != null)
			$scope.alertsFriend.push({ type: t, msg: m});
		else
			$scope.alertsFriend.push({msg: m});		
	};

	$scope.closeAlert = function(index) {
		$scope.alertsFriend.splice(index, 1);
	};
	
	
	$scope.setDrawing = function(value){		
		mapService.setDrawingControl(value);
	};
	
	$scope.overlaysTemp = {};
	$scope.overlaysEncode = {};
	
	$scope.pattern = {"start": 4, "split":2, "joinA":3, "joinB":5, "sequence":1, "end":0 };
	
	//////-------------- ment.io -----------------------------
	$scope.products = [];
	$scope.people = [];	
	$scope.items = [];
	$scope.myIndexValue = "5";

    $scope.searchUsers = function(term) {
        var prodList = [];
        angular.forEach($scope.flows, function(item) {
            if (item.title.toUpperCase().indexOf(term.toUpperCase()) >= 0) {
                prodList.push(item);
            }
        });        
        $scope.products = prodList;
        $scope.items = prodList;
        return $q.when(prodList);         
       
    };
    
    $scope.searchUsers = function(term) {
        var peopleList = [];
        angular.forEach($scope.currentUsers, function(item) {
        	console.log(item);
            if (item.name.toUpperCase().indexOf(term.toUpperCase()) >= 0) {
                peopleList.push(item);
            }
        });
        $scope.people = peopleList;
        $scope.items = peopleList;
        return $q.when(peopleList);
        
    };
    
    $scope.getPeopleTextRaw = function(item) {
        return '@' + item.name;
    };
    
    $scope.getFlowsTextRaw = function(item) {
        var deferred = $q.defer();
        /* the select() function can also return a Promise which ment.io will handle
        propertly during replacement */
                // simulated async promise              
        $timeout(function() {
            deferred.resolve('#' + item.sku);
        }, 500);
        return deferred.promise;
    };
	
	////-----------typeahead-----------------------------------
	
	$scope.selectFriend = function(user){
		$scope.selectedFriend = user;		 
	};
	
	///------------Desde client a Servidor OA ------------------
	
	$scope.preAddTweet = function(){
		
		if($scope.process == null && $scope.tweet.pattern != 4)
			return;
		
		if($scope.tweet.txt.length <= 1)
			alert("Process's name is too short.");
		
		console.log("Pattern: "+$scope.tweet.pattern);
		switch($scope.tweet.pattern){
		case 1: //sequence
			$scope.addTweet();		
			
			break;
		case 2: //split
			break;
		case 3: //join a
			break;
		case 5: // join b
			break;
		case 4: // start
			var end = $scope.tweet.txt.indexOf(' ');
			if(end < 0)
				end = $scope.tweet.txt.length;
			$scope.session = $scope.tweet.txt.substr(1, end);
			$scope.newSession();
			break;
		case 0: //finish
			break;
		}
		if($scope.tweet.pattern == $scope.pattern.start)
			$scope.tweet.txt = "#"+$scope.currentProcess;
		else
			$scope.tweet.txt = "%"+ $scope.tweet.pattern + " #"+$scope.currentProcess;
	};
	
	
	$scope.addTweet = function(){
		var overlays = {};
		var s = 0;
		var size = sizeService.getSize();
		console.log("addTweet: "+ size);
		$scope.overlaysEncode = mapService.getOverlaysEncode();
		$scope.overlaysTemp = mapService.getOverlays();
		
		
		if(size > 0){
			var i = 0;
			
			for(i=0;i<size;i++){
				console.log("$scope.overlaysEncode[i]: "+$scope.overlaysEncode[i]);
				if($scope.overlaysEncode[i] != null){					
					overlays[s] = $scope.overlaysEncode[i];
					s++;
					$scope.overlaysTemp[i].setVisible(false);
					mapService.getInfowindows(i).close();
				}else
					console.log("NULL con id "+i);
				
				
				
			}
		}		
		var overlaysJSON = JSON.stringify(overlays);
		console.log(overlaysJSON);
		$scope.process.preAddTweet($scope.currentProcess, $scope.tweet.txt, $scope.username, overlaysJSON);	
		
		//limpiar dibujos del mapa
		
		
		mapService.resetOverlays();
		sizeService.setSize(0);
	};
	
	//------------ Desde Servidor OA a modelos -----------------
	
	$scope.addTweetToModel = function(session, body, createdAt, createdBy){	
		
		
		var id = tweetService.add({session: session, body: body, createdAt: createdAt, createdBy: createdBy});		
		var flws = [];
		var index = body.indexOf('^');
		
		return id;
		
		
		
	};
	
	//-----------------------------------------------------------
	
	//observar el valor de un elemento del modelo	
	/*$scope.$watch(function() {
		  return $scope.tweet.txt;
	}, function(newValue, oldValue) {	
		console.log(newValue);
		if(newValue == '' || newValue == null || newValue=="")
			$scope.setDrawing(false);
		else
			$scope.setDrawing(true);
	}); */
	
	/*$scope.$watch(function() {
		  return $scope.tweet;
	}, function(newValue, oldValue) {	
		console.log('NEWCONTROL'+newValue);		
	}); */
	
	//------------ Comunicacion con BD de cliente ----------------	
	
	$scope.getUsers = function(){
		$.ajax({
			type: "GET",
			url: "chargeUsers",
			data: {},
			success: function(data){
				console.log(data);
				$scope.users = data;
			},
			 error:function(objXMLHttpRequest){
				 alert('error');
				 }
		});
	};	
	
	$scope.getUsersBySession = function(){
		if($scope.currentProcess == null || $scope.currentProcess =='')
			return;
		$.ajax({
			  type: "GET",
			  url: "usersBySession/"+$scope.currentProcess,
			  data: {session: $scope.currentProcess},
			  success:function(data) {
				  
				  if(data != null){
					  $scope.currentUsers = [];
					  for(var i=0;i<data.length;i++){	
						 console.log(data.length);
						 $scope.currentUsers.push({name: data[i], title: data[i], label: data[i]}); 
					  }						  
				  }				  
		      },
			  error:function(objXMLHttpRequest){alert('error');}
			});	
	};
	
	//actualiza lista de procesos
	$scope.getProcessesByUser = function(){	
		jQuery.ajax({
			type : 'GET',
			data : {
				'name': $scope.username
			},
			success : function(data, textStatus, jqXHR) {
				$scope.processes = data;
				if(data.length == 0)
					$scope.status.isFirstDisabled = true;
				else
					$scope.status.isFirstDisabled = false;
				$scope.error['chargeProcess'] = null;
			},
			//async : async,
			url : "chargeProcess/"+$scope.username,
			error:function(objXMLHttpRequest){
				$scope.error['chargeProcess'] = "Processes are not ready. Please, try recharge tab again.";
			}
		});
	};	
	
	$scope.newSession = function(){		
		$.ajax({
			type: "POST",
			url: "newSession",
			data: {user: $scope.username, session: $scope.session},
			
			success:function(data) {
				$scope.process = new Process($scope.session);
				$scope.currentProcess = $scope.process.session;
			},
			error:function(objXMLHttpRequest){alert('error');}
		});	        
	};
	
	$scope.addFriend = function(){
		console.log("selectedFriend: ");
		console.log($scope.currentProcess);
		$.ajax({
			type: "POST",
			url: "invite2",
			data: {session: $scope.currentProcess, user: $scope.selectedFriend},			
			success:function(data) {
				$scope.users.push($scope.selectedFriend);
				$scope.addAlert('success', 'Well done!  You successfully added to '+$scope.selectedFriend);
				$scope.selectedFriend = "";
			},
			error:function(objXMLHttpRequest){
				$scope.addAlert('danger', 'Oh snap! Change a few things up and try submitting again.');
			}
		});	 
	};
	
	//------------------------------------------------------------------
	
	angular.element(document).ready(function () {
		if($scope.currentProcess == null || $scope.currentProcess==""){
			ConstantsService.ddData[0].selected = true;
			$scope.tweet.pattern = ConstantsService.ddData[0].value;
		}else{
			ConstantsService.ddData[4].selected = true;
			$scope.tweet.pattern = ConstantsService.ddData[4].value;
		}
		$('#myDropdown').ddslick({
		    data: ConstantsService.ddData,
		    width:40,
		    selectText: "",
		    imagePosition:"left",
		    onSelected: function(selectedData){
		        //callback function: do something with selectedData;
		    	$scope.selectedData = selectedData.selectedData;
		    	$scope.tweet.pattern = $scope.selectedData.value;
		    	console.log($scope.selectedData);
		    	console.log($scope.tweet);
		    	var index = $scope.tweet.txt.indexOf('#');
		    	$scope.$apply(function() {
		    		$scope.tweet.txt = ($scope.tweet.pattern != $scope.pattern.start)?"%"+$scope.tweet.pattern + " " + $scope.tweet.txt.substr(index):"#";
		    		console.log($scope.tweet.txt);
		    	});
	    			        
		    }   
		});	
	});
	
	
		
});


app.service("ConstantsService", function(){
	
	//Dropdown plugin data
	//Object {text: "Start process", value: 4, selected: false, description: "#", imageSrc: "resources/images/patterns/start.png"} 
	this.ddData = [
 	    {
 	        text: "Start process",
 	        value: 4,
 	        selected: false,
 	        description: "#",
 	        imageSrc: "resources/images/patterns/start.png"
 	    },
 	    {
 	        text: "Parallel split",
 	        value: 2,
 	        selected: false,
 	        description: "%2",
 	        imageSrc: "resources/images/patterns/flow-split.png"
 	    },
 	    {
 	        text: "Syncronization a",
 	        value: 3,
 	        selected: false,
 	        description: "%3a",
 	        imageSrc: "resources/images/patterns/flow-merge.png"
 	    },
 	    {
 	        text: "Syncronization b",
 	        value: 5,
 	        selected: false,
 	        description: "%3b",
 	        imageSrc: "resources/images/patterns/flow-merge.png"
 	    },
 	    {
 	        text: "Sequence",
 	        value: 1,
 	        selected: false,
 	        description: "%1",
 	        imageSrc: "resources/images/patterns/flow-sequence.png"
 	    },
 	    {
 	        text: "Implicit termination",
 	        value: 0,
 	        selected: false,
 	        description: "%11",
 	        imageSrc: "resources/images/patterns/finish.png"
 	    }	    
 	];
	
	//Object { 'id': n, 'name':user,  'img':'', 'type':'' }
	
	
});

//------------ Utilizados por mentio ---------------------------------------

app.directive('contenteditable', ['$sce', function($sce) {
    return {
        restrict: 'A', // only activate on element attribute
        require: 'ngModel', // get a hold of NgModelController
        link: function(scope, element, attrs, ngModel) {
            function read() {
                var html = element.html();
                console.log("html:");
                console.log(html);
                // When we clear the content editable the browser leaves a <br> behind
                // If strip-br attribute is provided then we strip this out
                if (attrs.stripBr && html === '<br>') {
                    html = '';
                }
                ngModel.$setViewValue(html);
            }

            if(!ngModel) return; // do nothing if no ng-model

            // Specify how UI should be updated
            ngModel.$render = function() {
                if (ngModel.$viewValue !== element.html()) {
                    element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
                }
            };

            // Listen for change events to enable binding
            element.on('blur keyup change', function() {
                scope.$apply(read);
            });
            read(); // initialize
        }
    };
}]);

app.filter('words', function () {
    return function (input, words) {
        if (isNaN(words)) {
            return input;
        }
        if (words <= 0) {
            return '';
        }
        if (input) {
            var inputWords = input.split(/\s+/);
            if (inputWords.length > words) {
                input = inputWords.slice(0, words).join(' ') + '\u2026';
            }
        }
        return input;
    };
});

//---------------- Fin utilizados por mentio --------------------------------

// --------------- Validacion de texto ingresado  --------------------------

app.directive('tweetFormat', function (){ 
	   return {
		      require: 'ngModel',
		      link: function(scope, elem, attr, ngModel) {		         
		          //For DOM -> model validation
		          ngModel.$parsers.unshift(function(value) {
		        	  var condition = null;
		        	  var pattern = scope.tweet.pattern;		        	          	  
			          var valid = false;
			          
			          if(value == undefined){
			        	  scope.setDrawing(false);
				          ngModel.$setValidity('tweetFormat', false);
			        	  return "";
			          }
			          switch(pattern){
		         			case 1: //sequence
		         				condition = /1 #.*/;
		         				break;
		         			case 2: //split
		         				condition = /2 #.*/;
		         				break;
		         			case 3: //join a
		         				condition = /3a #.*/;
		         				break;
		         			case 5: // join b
		         				condition = /3b #.*/;
		         				break;
		         			case 4: // start
		         				condition = /#.*/;
		         				
		         				break;
		         			case 0: //finish
		         				condition = /11 #.*/;
		         				break;
		         		}  
			          console.log("value: "+ value);
			          console.log("value: "+ value.match(condition));
			          if(value.match(condition))
			        	  valid = true;		          
			          else 
			        	  valid = false;        	  
			          
			          scope.setDrawing(valid);
			           ngModel.$setValidity('tweetFormat', valid);
			           return value;
		          });
		          
		        

		          
		      }
		   };
		});

